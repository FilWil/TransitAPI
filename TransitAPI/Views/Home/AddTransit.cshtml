@model TransitAPI.Models.Transit

@{
    ViewData["Title"] = "AddTransit";
}

<h2>AddTransit</h2>

<h4>Transit</h4>
<hr />
<div class="row">
    <div class="col-md-3">
        <form asp-controller="Transits" method="post">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="SourceAddress" class="control-label"></label>
                <input asp-for="SourceAddress" class="form-control" id="source"/>
                <span asp-validation-for="SourceAddress" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="DestinationAddress" class="control-label"></label>
                <input asp-for="DestinationAddress" class="form-control" id="destination"/>
                <span asp-validation-for="DestinationAddress" class="text-danger"></span>
            </div>
            <div class="form-group">
                <button class="btn btn-default" id="calculate-range-button">GET RANGE</button>
            </div>

            <div class="form-group">
                <label asp-for="Range" class="control-label"></label>
                <input asp-for="Range" class="form-control" readonly="readonly" id="range"/>
                <span asp-validation-for="Range" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="Price" class="control-label"></label>
                <input asp-for="Price" class="form-control" />
                <span asp-validation-for="Price" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Date" class="control-label"></label>
                <input asp-for="Date" class="form-control" />
                <span asp-validation-for="Date" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </form>
    </div>
    <div class="col-md-6" style="height: 550px;">
        <div id="myMap">

        </div>
    </div>
    <div class="col-md-3">
        <div id="printoutPanel"></div>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>



<script type='text/javascript' src='https://www.bing.com/api/maps/mapcontrol?callback=GetMap&key=AmH6ttRcEnLYH8sjIHAYHf4tVrzoDUTrhRYGa3bS4wqkrZG0-M47JSVU1QvPNyDT' async defer></script>
<script type="text/javascript">

    function GetMap() {
        var map = new Microsoft.Maps.Map('#myMap', {});

        document.getElementById('calculate-range-button').addEventListener('click', () => {
            Microsoft.Maps.loadModule('Microsoft.Maps.Directions', function () {
                var directionsManager = new Microsoft.Maps.Directions.DirectionsManager(map);
                directionsManager.setRenderOptions({ itineraryContainer: document.getElementById('printoutPanel') });
                directionsManager.setRequestOptions({
                    routeMode: Microsoft.Maps.Directions.RouteMode.truck,

                });
                var wp1 = new Microsoft.Maps.Directions.Waypoint({
                    address: document.getElementById('source').value
                });
                var wp2 = new Microsoft.Maps.Directions.Waypoint({
                    address: document.getElementById('destination').value
                });

                directionsManager.addWaypoint(wp1);
                directionsManager.addWaypoint(wp2);

                Microsoft.Maps.Events.addHandler(directionsManager, 'directionsUpdated', directionsUpdated);

                directionsManager.calculateDirections();

                function directionsUpdated(e) {
                    //Get the current route index.
                    var routeIdx = directionsManager.getRequestOptions().routeIndex;

                    //Get the distance of the route, rounded to 2 decimal places.
                    var distance = Math.round(e.routeSummary[routeIdx].distance * 100) / 100;

                    //Get the distance units used to calculate the route.
                    var units = directionsManager.getRequestOptions().distanceUnit;
                    var distanceUnits = '';

                    if (units == Microsoft.Maps.Directions.DistanceUnit.km) {
                        distanceUnits = 'km'
                    } else {
                        //Must be in miles
                        distanceUnits = 'miles'
                    }

                    console.log(distance);
                    console.log(parseFloat(distance));
                    document.getElementById('range').value = distance.toFixed(0);
                    //here is a little problem with a conversion I guess
                    //form isn't accepting double numbers in format '7.23' -> even if model is set to double
                    //problem might be with culture info and ','/'.' or model is trying to parse 7.23 to double and it returns something strange like 7.23.0
                    //gonna get back there later (probably)
                }
            });
        });
    }

</script>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
